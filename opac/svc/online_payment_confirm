#!/usr/bin/perl

# Copyright 2015 PTFS Europe
#
# This file is part of Koha.
#
# Koha is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# Koha is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with Koha; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use Modern::Perl;

use CGI qw( -utf8 );
use XML::LibXML;
use DateTime;
use Digest::MD5 qw(md5_base64);

use C4::Accounts qw(makepayment);
use C4::Circulation qw(CheckIfIssuedToPatron AddRenewal);
use C4::Context;

# Parse XML
binmode STDIN, ':encoding(UTF-8)';
my $xml_string;
while (<STDIN>) {
    $xml_string .= $_;
}
my $xml;
eval { $xml = XML::LibXML->load_xml( string => $xml_string ); };
warn "error: " . $@ if $@;

my $transaction = $xml->findnodes('/wpmpaymentrequest/transactionreference');
my $success     = $xml->findnodes('/wpmpaymentrequest/transaction/success');

if ( $success eq '1' ) {
    my $schema = Koha::Database->new()->schema();

    # Make payments (associating them to a transaction)
    my @accountlines = $schema->resultset('AcTransactionAccount')
      ->search( { transaction_id => $transaction } )->all;
    for my $account (@accountlines) {

        # Make Payment
        makepayment(
            $account->accountline_id,
            $account->accountline->borrowernumber,
            $account->accountline->accountno,
            $account->accountline->amount
        );

        # Update Transaction (2 = success)
        $account->update( { status => '2' } );

        # Renew if required
        if (
            CheckIfIssuedToPatron(
                $account->accountline->borrowernumber,
                $account->accountline->itemnumber->biblionumber
            )
          )
        {
            AddRenewal(
                $account->accountline->borrowernumber,
                $account->accountline->itemnumber
            );
        }
    }

    # Respond with OK
    my $response = new CGI;
    print header('text/html','204 No response');
    return;
}
else {
    # Update transaction status
    #
    # Respond OK
    print header('text/html','204 No response');
    return;

}

1;

#foreach my $payment ( $doc->findnodes('/wpmpaymentrequest/payments') ) {
#    my ($title) = $payment->findnodes('./title');
#    print $title->to_literal, "\n";
#}

#my @params = $input->param();
#my $inxml = $input->param('POSTDATA');
#warn "XML: " . $inxml . "\n";

